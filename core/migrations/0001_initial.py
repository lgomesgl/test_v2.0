# Generated by Django 4.2 on 2023-05-29 22:57

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Creates date', models.DateField(auto_now_add=True)),
                ('Modify date', models.DateField(auto_now=True)),
                ('type', models.CharField(choices=[('Pessoal', 'Pessoal'), ('Educacional', 'Educacional')], max_length=15)),
                ('email', models.EmailField(max_length=30)),
            ],
            options={
                'verbose_name': 'Email',
                'verbose_name_plural': 'Email',
            },
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Creates date', models.DateField(auto_now_add=True)),
                ('Modify date', models.DateField(auto_now=True)),
                ('title', models.CharField(default='', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('keyword', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('contact', models.ManyToManyField(to='core.email')),
            ],
            options={
                'verbose_name': 'Metadata',
                'verbose_name_plural': 'Metadata',
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Creates date', models.DateField(auto_now_add=True)),
                ('Modify date', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('Sex', models.CharField(choices=[('M', 'Masculino'), ('F', 'Feminino')], max_length=1)),
                ('Post', models.CharField(choices=[('Professor Doutor', 'Professor Doutor'), ('Professor Adjunto', 'Professor Adjunto'), ('Pesquisador', 'Pesquisador'), ('Pós-Doc', 'Pós-Doc'), ('Doutorando', 'Doutorando'), ('Mestrando', 'Mestrando'), ('Iniciação científica', 'Iniciação científica')], max_length=100)),
            ],
            options={
                'verbose_name': 'People',
                'verbose_name_plural': 'People',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Creates date', models.DateField(auto_now_add=True)),
                ('Modify date', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('Over date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Project',
            },
        ),
        migrations.CreateModel(
            name='Videos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Creates date', models.DateField(auto_now_add=True)),
                ('Modify date', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('video', models.FileField(blank=True, upload_to='')),
                ('metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.metadata')),
            ],
            options={
                'verbose_name': 'Videos',
                'verbose_name_plural': 'Videos',
            },
        ),
        migrations.CreateModel(
            name='SponsorCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Creates date', models.DateField(auto_now_add=True)),
                ('Modify date', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('project', models.ManyToManyField(to='core.project')),
            ],
            options={
                'verbose_name': 'SponsorCompany',
                'verbose_name_plural': 'SponsorCompany',
            },
        ),
        migrations.CreateModel(
            name='ReasearchLines',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Creates date', models.DateField(auto_now_add=True)),
                ('Modify date', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('phase', models.CharField(blank=True, choices=[('Single-phase-flow', 'Single-phase-flow'), ('Two-phase-flow', 'Two-phase-flow'), ('Three-phase-flow', 'Three-phase-flow')], max_length=30)),
                ('point', models.CharField(blank=True, max_length=50)),
                ('person', models.ManyToManyField(to='core.people')),
                ('project', models.ManyToManyField(to='core.project')),
            ],
            options={
                'verbose_name': 'ReasearchLines',
                'verbose_name_plural': 'ReasearchLines',
            },
        ),
        migrations.AddField(
            model_name='people',
            name='projeto',
            field=models.ManyToManyField(to='core.project'),
        ),
        migrations.AddField(
            model_name='metadata',
            name='contributor',
            field=models.ManyToManyField(to='core.people'),
        ),
        migrations.AddField(
            model_name='metadata',
            name='reasearchline',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.reasearchlines'),
        ),
        migrations.CreateModel(
            name='Files',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Creates date', models.DateField(auto_now_add=True)),
                ('Modify date', models.DateField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=50)),
                ('type', models.CharField(blank=True, choices=[('PDF', 'PDF'), ('EXCEL', 'EXCEL'), ('WORD', 'WORD')], max_length=50)),
                ('file', models.FileField(blank=True, upload_to='')),
                ('metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.metadata')),
                ('person', models.ManyToManyField(to='core.people')),
            ],
            options={
                'verbose_name': 'Files',
                'verbose_name_plural': 'Files',
            },
        ),
        migrations.AddField(
            model_name='email',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.people'),
        ),
        migrations.CreateModel(
            name='Articles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Creates date', models.DateField(auto_now_add=True)),
                ('Modify date', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('link_path', models.CharField(max_length=100)),
                ('metadata', models.ManyToManyField(to='core.metadata')),
                ('person', models.ManyToManyField(to='core.people')),
                ('reasearchline', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.reasearchlines')),
            ],
            options={
                'verbose_name': 'Articles',
                'verbose_name_plural': 'Articles',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('group', models.CharField(blank=True, max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
